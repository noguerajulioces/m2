---
name: Continuous Integration

on:
  push:
    branches:
      - main
      - qa
  pull_request:
    branches:
      - '*'
jobs:
  brakeman:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.1

      - name: Brakeman
        uses: devmasx/brakeman-linter-action@v1.0.0
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  CI:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:12.3
        env:
          POSTGRES_PASSWORD: postgres
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.1

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get -yqq install libpq-dev
      - name: Setup cache
        uses: actions/cache@v2.1.6
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Install Dependencies
        env:
          RAILS_ENV: test
        run: |
          bundle config set smart.jfrog.io github-actions-read:${{secrets.JFROG_READ_TOKEN}}
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: setup DB
        env:
          PGHOST: localhost
          PGUSER: postgres
          RAILS_ENV: test
        run: |
          cp .env.example .env
          bundle exec bin/rails db:create
          bundle exec bin/rails db:migrate
      - name: Run Tests
        env:
          PGHOST: localhost
          PGUSER: postgres
          RAILS_ENV: test
          UNIT_TEST_COVERAGE: true
        run: |
          bundle exec rspec
      - name: Upload coverage report on head (current branch)
        uses: actions/upload-artifact@v2
        with:
          name: head-result
          path: coverage/.resultset.json

      - name: Upload coverage report on base (main branch)
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v2
        with:
          name: base-result
          path: coverage/.resultset.json